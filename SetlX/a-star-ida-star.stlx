// This procedure implements the A*IDA* search algorithm.
aStarIdaStarSearch := procedure(start, goal, nextStates, heuristic, size) {
    Parent   := {};                // dictionary: state |-> predecessor(state)
    Distance := { [start, 0] };    // dictionary: state |-> distance(start, state)
    est      := heuristic(start, goal);
    Estimate := { [start, est] };  // dictionary: state |-> distance(start, state, goal)
    Frontier := { [est, start] };  // priority queue
    while (#Distance < size && Frontier != {}) {
        [_, state] := fromB(Frontier);
        if (state == goal) {
            print("Number of states touched: $#Distance$");
            return pathTo(state, Parent);
        }
        stateDist := Distance[state];
        for (neighbour in nextStates(state)) {
            oldEstimate := Estimate[neighbour];
            newEstimate := stateDist + 1 + heuristic(neighbour, goal);
            if (oldEstimate == om || newEstimate < oldEstimate) {
                Parent[neighbour]   := state;
                Distance[neighbour] := stateDist + 1;
                Estimate[neighbour] := newEstimate;
                Frontier            += { [newEstimate, neighbour] };
                if (oldEstimate != om) {
                    Frontier -= { [oldEstimate, neighbour] };
                }
            }
        }
    }
    Path := deepeningSearch(goal, start, nextStates, heuristic, Distance);
    return pathTo(Path[-1], Parent) + reverse(Path)[2..];
};
deepeningSearch := procedure(goal, start, nextStates, heuristic, Distance) {
    limit := 0;
    while (true) {
        print("limit = $limit$");
        Path := search([goal], start, nextStates, limit, heuristic, Distance);
        if (isList(Path)) {
            return Path;
        }
        limit := Path;
    }
};
search := procedure(Path, start, nextStates, limit, heuristic, Distance) {
    state := Path[-1];
    total := #Path - 1 + heuristic(state, start);
    if (total > limit) { return total; }
    if (Distance[state] != om) { return Path; }
    smallest := mathConst("Infinity");
    for (ns in nextStates(state) | !(ns in Path) ) {
        result := search(Path+[ns], start, nextStates, limit, heuristic, Distance);
        if (isList(result)) {
            return result;
        }
        smallest := min([smallest, result]);
    }
    return smallest;
};

    

