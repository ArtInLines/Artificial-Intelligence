// This implements the A* search algorithm.
aStarSearch := procedure(start, goal, nextStates, heuristic) {
    estGoal  := heuristic(start, goal);
    Parent   := {};                    // back pointers, represented as dictionary
    Distance := { [start, 0] };
    Estimate := { [start, estGoal] };  // dictionary for estimated distance
    Frontier := { [estGoal, start] };  // priority queue
    while (Frontier != {}) {
        [_, state] := fromB(Frontier);
        if (state == goal) {
            print("Number of states touched: $#Distance$");
            return pathTo(state, Parent);
        }
        stateDist := Distance[state];
        for (neighbour in nextStates(state)) {
            oldEstimate := Estimate[neighbour];
            newEstimate := stateDist + 1 + heuristic(neighbour, goal);
            if (oldEstimate == om || newEstimate < oldEstimate) {
                Parent[neighbour]   := state;
                Distance[neighbour] := stateDist + 1;
                Estimate[neighbour] := newEstimate;
                Frontier            += { [newEstimate, neighbour] };
                if (oldEstimate != om) {
                    Frontier -= { [oldEstimate, neighbour] };
                }
            }
        }
    }
};
