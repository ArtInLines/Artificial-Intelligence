bestFirstSearch := procedure(start, goal, nextStates, heuristic) {
    PrioQueue := { [heuristic(start, goal), [start]] };
    while (PrioQueue != {}) {
        [_, Path] := fromB(PrioQueue);
        state     := Path[-1];
        if (state == goal) {
            return Path;
        }
        if (#PrioQueue % 100 == 0) {
            print("#PrioQueue = $#PrioQueue$, estimated distance = $heuristic(state, goal)$");
        }
        for (ns in nextStates(state) | !(ns in Path)) {
            PrioQueue += { [heuristic(ns, goal), Path + [ns]] };
        }
    }
};

