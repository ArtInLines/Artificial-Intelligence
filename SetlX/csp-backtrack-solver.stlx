loadLibrary("termUtilities");
load("queens-csp.stlx");

// This function collects all variables occurring in the formula f.
// To simplify things it is asssumed that f is either an equation or
// a negated equation and that the terms occurring in this equations
// only contain the arithmetical operators.
collectVars := procedure(f) {
    return varsTerm(parseTerm(f));
};
varsTerm := procedure(f) {
    match (f) {
        case v | isVariable(v): return { varName(v) };
        case n | isNumber(n):   return {};
        case lhs + rhs:         return varsTerm(lhs) + varsTerm(rhs);
        case lhs - rhs:         return varsTerm(lhs) + varsTerm(rhs);
        case lhs * rhs:         return varsTerm(lhs) + varsTerm(rhs);
        case lhs / rhs:         return varsTerm(lhs) + varsTerm(rhs);
        case lhs \ rhs:         return varsTerm(lhs) + varsTerm(rhs);
        case lhs % rhs:         return varsTerm(lhs) + varsTerm(rhs);
        case lhs == rhs:        return varsTerm(lhs) + varsTerm(rhs);
        case lhs != rhs:        return varsTerm(lhs) + varsTerm(rhs);
        case !formula:          return varsTerm(formula);
        case lhs && rhs:        return varsTerm(lhs) + varsTerm(rhs);
        case lhs || rhs:        return varsTerm(lhs) + varsTerm(rhs);
        case lhs => rhs:        return varsTerm(lhs) + varsTerm(rhs);
        case lhs <==> rhs:      return varsTerm(lhs) + varsTerm(rhs);
        case lhs <!=> rhs:      return varsTerm(lhs) + varsTerm(rhs);
        default:                return +/ [ varsTerm(t) : t in args(f) ];
    }
};

////////////////////////////////////////////////////////////////////////////////

// This is a very basic constraints solver that is based on backtracking.
solve := procedure(CSP) {
    [Vars, Vals, Constrs] := CSP;
    CSP := [Vars, Vals, { [f, collectVars(f)] : f in Constrs }];
    check {
        return bt_search({}, CSP);
    }
};
// Given a partial assignment, this procedure tries to complete this assignment
// so that the given CSP is solved.
bt_search := procedure(Assignment, CSP) {
    [Variables, Values, Constraints] := CSP;
    if (#Assignment == #Variables) {
        return Assignment;
    }
    var := select_unassigned_variable(Assignment, Variables);
    for (value in Values) {
        check {
            if (is_consistent(var, value, Assignment, Constraints)) {
                return bt_search(Assignment + { [var, value] }, CSP);
            }
        }
    }
    backtrack;
};
// Given the current Assignment, select a variable that has not yet been
// assigned a value.
select_unassigned_variable := procedure(Assignment, Variables) {
    return rnd(Variables - domain(Assignment));
};
// Check, whether the extended assignment
//     Assignment + { [var, value] };
// is consistent with the given constraints.
is_consistent := procedure(var, value, Assignment, Constraints) {
    NewAssignment := Assignment + { [var, value] };
    for ([Formula, Vars] in Constraints | var in Vars) {
        if (Vars <= domain(NewAssignment)) {
            if (!eval_constraint(NewAssignment, Formula)) {
                return false;
            }
        }
    }
    return true;
};
// Evaluate a formula under a given Assignment.
//   Assignment: Binary relation assigning values to variables
//   Vars:       Set of variables occurring in Formula
//   Formula:    The formula to evaluate
eval_constraint := procedure(Assignment, Formula) {
    for ([var, value] in Assignment) {
        execute("$var$ := $value$;");
    }
    return eval(Formula);
};

main := procedure() {
    resetRandom();
    lower := 8;
    upper := 32;
    for (n in [lower .. upper]) {
        CSP      := createCSP(n);   
        start    := now();
        solution := solve(CSP);
        stop     := now();
        total    := (stop - start) / 1000.0;
        // printSolution(solution);
        print("The computation for the $n$ queens problem took $total$ seconds.");
    }
};
main();

