load("queens-csp.stlx");

// This is a very basic constraints solver that is based on brute force search.
solve := procedure(CSP) {
    return brute_force_search({}, CSP);
};
// Given a partial assignment of variable, this procedure tries to complete
// this assignment so that the given CSP is solved.
brute_force_search := procedure(Assignment, CSP) {
    [Variables, Values, Constraints] := CSP;
    if (#Assignment == #Variables) {  // all variables have been assigned
        if (check_all_constraints(Assignment, Constraints)) {
            return Assignment;
        }
        return;
    }
    var := rnd(Variables - domain(Assignment));
    for (value in Values) {
        NewAss := Assignment + { [var, value] };
        result := brute_force_search(NewAss, CSP);
        if (result != om) {
            return result;
        }
    }
};
check_all_constraints := procedure(Assignment, Constraints) {
    return forall(f in Constraints | eval_constraint(Assignment, f));
};       
eval_constraint := procedure(Assignment, Formula) {
    for ([var, value] in Assignment) {
        execute("$var$ := $value$;");
    }
    return eval(Formula);
};
main := procedure() {
    resetRandom();
    lower := 4;
    upper := 8;
    for (n in [lower .. upper]) {
        csp      := createCSP(n);   
        start    := now();
        solution := solve(csp);
        stop     := now();
        total    := (stop - start) / 1000.0;
        printSolution(solution);
        print("The computation for the $n$ queens problem took $total$ seconds.");
    }
};
main();

