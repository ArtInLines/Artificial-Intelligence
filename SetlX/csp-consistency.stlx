loadLibrary("termUtilities");
// load("queens-csp.stlx");
load("send-more-money.stlx");

// This function collects all variables occurring in the formula f.
// To simplify things it is assumed that f is either an equation or
// a negated equation and that the terms occurring in this equations
// only contain the arithmetical operators.
collectVars := procedure(f) {
    return varsTerm(parseTerm(f));
};
varsTerm := procedure(f) {
    match (f) {
        case v | isVariable(v): return { varName(v) };
        case n | isNumber(n):   return {};
        default:                return +/ [ varsTerm(t) : t in args(f) ];
    }
};

////////////////////////////////////////////////////////////////////////////////

// This is a constraints solver that is based on backtracking, constraint
// propagation, and maintaining arc-consistency.
solve := procedure(csp) {
    [Variables, Values, Constrs] := csp;
    ValuesPerVar := { [x, Values] : x in Variables };
    Annotated    := { [f, collectVars(f)] : f in Constrs };
    UnaryConstrs := { [f, V] : [f, V] in Annotated | #V == 1 };
    OtherConstrs := { [f, V] : [f, V] in Annotated | #V >= 2 };
    Connected    := {};
    for (x in Variables) {
        Vars := +/ { V : [f, V] in Annotated | x in V } - { x };
        Connected +={ [x, Vars] };
    }
    check {
        for ([f, V] in UnaryConstrs) {
            var               := arb(V);
            ValuesPerVar[var] := solve_unary(f, var, ValuesPerVar[var]);
        }
        Var2Formulas := variables2Formulas(OtherConstrs);
        enforceConsistency(ValuesPerVar, Var2Formulas, Annotated, Connected);
        csp := [Variables, ValuesPerVar, OtherConstrs, Var2Formulas];
        return bt_search({}, csp, Connected);
    }
};
// This procedure takes four arguments:
//   * ValuesPerVar is a dictionary associating the set of possible values with
//     each variable.
//   * Var2Formulas is a dictionary.  For every variable v, Var2Formulas[v] is
//     the set of those constraints f such that v occurs in f.
//   * Annotated is the set of annnotated constraints, i.e. this set contains
//     pairs of the form [f, Vars] where f is a constraint and Vars is the
//     set of variables occurring in f.
//   * Connected is a dictionary.  For every variable x, Connected[x] is the
//     set of variables that occur together with x.
// This procedure modifies the Dictionary ValuesPerVar.
enforceConsistency := procedure(rw ValuesPerVar, Var2Formulas, Annotated, Connected) {
    UncheckedVars := domain(Var2Formulas);
    while (UncheckedVars != {}) {
        variable    := from(UncheckedVars);
        Constraints := Var2Formulas[variable];
        Values      := ValuesPerVar[variable];
        RemovedVals := {};
        for (f in Constraints) {
            OtherVars := Annotated[f] - { variable };
            for (value in Values) {
                if(!existsValue(variable, value, f, OtherVars, ValuesPerVar)) {
                    RemovedVals   += { value };
                    UncheckedVars += Connected[variable];
                }
            }
        }
        Remaining := Values - RemovedVals;
        if (Remaining == {}) { backtrack; }
        ValuesPerVar[variable] := Remaining;
    }
};
// This procedure takes a variable v, a value, a constraint f, the set Vars of those
// variables in f that are different from v and a dictionary associating values
// with variables.  It checks whether there is a value for v such that the
// constraint can be satisfied.
existsValue := procedure(var, val, f, Vars, ValuesPerVar) {
    AllVars := { var } + Vars;
    return exists( A in createAllAssignments(Vars, ValuesPerVar)   |
                   eval_constraint(A + { [var, val] }, f, AllVars) );
};
// Return the set of all possible assignments for the variables in the set Vars.
createAllAssignments := procedure(Vars, ValuesPerVar) {
    if (Vars == {}) {
        return { {} };  // set containing empty assignment
    }
    var         := from(Vars);
    Values      := ValuesPerVar[var];
    Assignments := createAllAssignments(Vars, ValuesPerVar);
    return { { [var, val] } + A : val in Values, A in Assignments };
};
// This procdure takes the set of annotated of constraints as input.  It returns
// a dictionary that attaches to every variable v the set of those constraints f
// such that v occurs in f.
variables2Formulas := procedure(Constraints) {
    Dictionary := {};
    for ([f, Vars] in Constraints, x in Vars) {
        if (Dictionary[x] == om) {
            Dictionary[x] := { f };
        } else {
            Dictionary[x] += { f };
        }
    }
    return Dictionary;
};
// Given a constraint containing only variable, find the values that satisfy
// this constraint.
solve_unary := procedure(constraint, variable, Values) {
    LegalValues := {};
    for (value in Values) {
        Assignment := { [variable, value] };
        if (eval_constraint(Assignment, constraint, { variable })) {
            LegalValues += { value };
        }
    }
    if (LegalValues == {}) {
        backtrack;  // game over
    }
    return LegalValues;
};
// Given a partial assignment of variable, this procedure tries to complete
// this assignment so that the given CSP is solved.
bt_search := procedure(Assignment, csp, Connected) {
    [Variables, Values, Constraints, Var2Formulas] := csp;
    if (#Assignment == #Variables) {
        return Assignment;
    }
    x := most_constrained_variable(Assignment, Values);
    for (val in Values[x]) {
        check {
            if (is_consistent(x, val, Assignment, Constraints)) {
                NewVals := propagate(x, val, Assignment, Constraints, Values);
                csp := [Variables, NewVals, Constraints, Var2Formulas];
                return bt_search(Assignment + { [x, val] }, csp, Connected);
            }
        }
    }
    backtrack;
};
// Given the current Assignment, select a variable that has not yet been
// assigned a value.
most_constrained_variable := procedure(Assignment, Values) {
    Unassigned := { [x, U] : [x, U] in Values | Assignment[x] == om };
    minSize    := min({ #U : [x, U] in Unassigned });
    return rnd({ x : [x, U] in Unassigned | #U == minSize });
};
propagate := procedure(x, v, Assignment, Constraints, Values) {
    NewAssignment := Assignment + { [x, v] };
    Values[x]     := { v };
    for ([Formula, Vars] in Constraints | x in Vars) {
        if (#Vars > 2) {
            continue;    // propagation only for binary constraints
        }
        OtherVars   := Vars - { x };
        UnboundVars := { y : y in OtherVars | !(y in domain(NewAssignment)) }; 
        if (#UnboundVars == 1) {
            y         := arb(UnboundVars);
            NewValues := Values[y];
            for (w in Values[y]) {
                A2 := NewAssignment + { [y, w] };
                if (!eval_constraint(A2, Formula, Vars)) {
                    NewValues -= { w };
                }
            }
            if (NewValues == {}) { backtrack; }
            Values[y] := NewValues;
        }
    }
    return Values;
};
// Evaluate a formula under a given Assignment.
//   Assignment: Binary relation assigning values to variables
//   Vars:       Set of variables occurring in Formula
//   Formula:    The formula to evaluate
eval_constraint := procedure(Assignment, Formula, Vars) {
    for (v in Vars) {
        execute("$v$ := $Assignment[v]$;");
    }
    return eval(Formula);
};
// Check, whether the extended assignment
//     Assignment + { [var, value] };
// is consistent with the given constraints.
is_consistent := procedure(var, value, Assignment, Constraints) {
    NewAssignment := Assignment + { [var, value] };
    for ([Formula, Vars] in Constraints | var in Vars) {
        if (Vars <= domain(NewAssignment)) {
            if (!eval_constraint(NewAssignment, Formula, Vars)) {
                return false;
            }
        }
    }
    return true;
};
// For every variable, print those values that might still be assigned
// to this variable.  This is only for debugging. 
printValues := procedure(ValuesPerVar) {
    for ([var, Values] in ValuesPerVar) {
        print("$var$ in $Values$");
    }
    print("=" * 80);
};
main := procedure() {
    resetRandom();
    startTotal := now();
    numIterations := 10;
    for (i in [1..numIterations]) {
        lower := 8;
        upper := 32;
        for (n in [lower .. upper]) {
            csp      := createCSP(n);
            start    := now();
            solution := solve(csp);
            stop     := now();
            total    := (stop - start) / 1000.0;
            // printSolution(solution);
            print("The computation for the $n$ queens problem took $total$ seconds.");
        }
    }
    stopTotal := now();
    all := (stopTotal - startTotal) / 1000.0;
    print("The total computation took $all$ seconds.");
};
mainMoney := procedure() {
    resetRandom();
    csp      := createCSP();
    start    := now();
    solution := solve(csp);
    stop     := now();
    total    := (stop - start) / 1000.0;
    printSolution(solution);
    print("The computation took $total$ seconds.");
};

// main();
mainMoney();
