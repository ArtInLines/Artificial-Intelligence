loadLibrary("termUtilities");
load("queens-csp.stlx");
// This function collects all variables occurring in the formula f.
// To simplify things it is asssumed that f is either an equation or
// a negated equation and that the terms occurring in this equations
// only contain the arithmetical operators.
collectVars := procedure(f) {
    return varsTerm(parseTerm(f));
};
varsTerm := procedure(f) {
    match (f) {
        case v | isVariable(v): return { varName(v) };
        case n | isNumber(n):   return {};
        default:                return +/ [ varsTerm(t) : t in args(f) ];
    }
};

// Given a partial assignment of variable, this procedure tries to complete
// this assignment so that the given CSP is solved.
solve := procedure(CSP) {
    [Vars, Values, Constraints] := CSP;
    Annotated := { [f, collectVars(f)] : f in Constraints };
    Assign    := { [x, rnd(Values)] : x in Vars };
    iteration := 0;
    lastVar   := first(Vars);
    while (true) {
        Conflicts := { [numConflicts(x, Assign, Annotated), x]
                     : x in Vars
                     | x != lastVar
                     };
        maxNum := last(Conflicts)[1];
        if (maxNum == 0) { // no conflicts, solution found
            print("Number of iterations: $iteration$");
            return Assign;
        }
        if (iteration % 10 == 0) { // avoid infinite loop
            x := rnd(Vars);
        } else { // choose var with max number of conflicts
            x := rnd({ var : [num, var] in Conflicts | num == maxNum});
        }
        lastVar := x;
        NewAssign := Assign - { [x, Assign[x]] };
        Conflicts := { [numConflicts(x, NewAssign + {[x, v]}, Annotated), v]
                     : v in Values
                     };
        minNum := first(Conflicts)[1];
        newVal := rnd({ [n, v] : [n, v] in Conflicts | n == minNum })[2];
        Assign[x] := newVal;
        iteration += 1;
    }
};
// Return the number of constraints violated by the variable x.
// Annotated is a set of pairs of the form [f, V] where f is a
// constraint and V is the set of variables occurring in f.
numConflicts := procedure(x, Assign, Annotated) {
    return #{ [f, V] : [f, V] in Annotated | x in V && !eval_constr(Assign, f) };
};
// Evaluate Formula using the given Assignment.
eval_constr := procedure(Assignment, Formula) {
    for ([var, value] in Assignment) {
        execute("$var$ := $value$;");
    }
    return eval(Formula);
};
main := procedure() {
    resetRandom();
    lower := 4;
    upper := 8;
    for (n in [lower .. upper]) {
        csp      := createCSP(n);   
        start    := now();
        solution := solve(csp);
        stop     := now();
        total    := (stop - start) / 1000.0;
        printSolution(solution);
        print("The computation for the $n$ queens problem took $total$ seconds.");
    }
};
main();

