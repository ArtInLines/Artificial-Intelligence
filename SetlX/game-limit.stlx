other := p |-> ([o : o in players() | o != p])[1];
value := cachedProcedure(State, player, limit, alpha := -1, beta := 1) {
    if (finished(State)) {
        return utility(State, player);
    }
    if (limit == 0) { return 0; }
    val := alpha;
    for (ns in nextStates(State, player)) {
        val := max({ val, -value(ns, other(player), limit - 1, -beta, -val) });
        if (val >= beta) {
            return val;
        }
    }
    return val;
};
best_move := procedure(State, player, limit := 2) {
    bestVal := value(State, player, limit);
    NS      := nextStates(State, player);
    return [bestVal, rnd({ns : ns in NS | -value(ns,other(player),limit-1) == bestVal})];
};
play_game := procedure() {
    State := startState();
    print(stateToString(State));
    while (!finished(State)) {
        start        := now();
        firstPlayer  := players()[1];
        [val, State] := best_move(State, firstPlayer);
        stop         := now();
        print(cacheStats(value));
        clearCache(value);
        print("For me, the game has the value $val$.  My move:");
        print(stateToString(State));
        print("computation took $(stop - start) * 0.001$ seconds");
        if (final_msg(State)) { return; }
        State := getMove(State);
        print(stateToString(State));
        if (final_msg(State)) { return; }
    }
};
