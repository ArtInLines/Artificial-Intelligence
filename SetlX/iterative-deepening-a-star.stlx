// Iterative deepening A* search.
idaStarSearch := procedure(start, goal, nextStates, heuristic) {
    limit := heuristic(start, goal);
    while (true) {
        print("limit = $limit$");
        Path := search([start], goal, nextStates, limit, heuristic);
        if (isList(Path)) {
            return Path;
        }
        limit := Path;
    }
};
search := procedure(Path, goal, nextStates, limit, heuristic) {
    state    := Path[-1];
    distance := #Path - 1;
    total    := distance + heuristic(state, goal);
    if (total > limit) { return total; }
    if (state == goal) { return Path;  }
    smallest := mathConst("Infinity");
    for (ns in nextStates(state) | !(ns in Path) ) {
        result := search(Path+[ns], goal, nextStates, limit, heuristic);
        if (isList(result)) {
            return result;
        }
        smallest := min([result, smallest]);
    }
    return smallest;
};
