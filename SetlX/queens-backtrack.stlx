// Solutions to the n-queens problem are represented as lists of the form
//    [x1,x2, ..., xn]
// where xi in {1, ..., n} and xi specifies, that in the ith row the queen
// is positioned in column xi.  This representation automatically ensures
// that there is exactly one queen per row.
// 
// For example, the list [1, 7, 5, 8, 2, 4, 6, 3] represents the following
// solution to the 8-queens problem.  In the diagramm below, the rows are
// numbered from top to button, so the topmost row is numbered 1, while the
// row at the bottom is numbered 8.
//
//     -----------------------------------------------------------------
//     |       |       |       |       |       |       |       |       |
//     |   Q   |       |       |       |       |       |       |       |
//     |       |       |       |       |       |       |       |       |
//     -----------------------------------------------------------------
//     |       |       |       |       |       |       |       |       |
//     |       |       |       |       |       |       |   Q   |       |
//     |       |       |       |       |       |       |       |       |
//     -----------------------------------------------------------------
//     |       |       |       |       |       |       |       |       |
//     |       |       |       |       |   Q   |       |       |       |
//     |       |       |       |       |       |       |       |       |
//     -----------------------------------------------------------------
//     |       |       |       |       |       |       |       |       |
//     |       |       |       |       |       |       |       |   Q   |
//     |       |       |       |       |       |       |       |       |
//     -----------------------------------------------------------------
//     |       |       |       |       |       |       |       |       |
//     |       |   Q   |       |       |       |       |       |       |
//     |       |       |       |       |       |       |       |       |
//     -----------------------------------------------------------------
//     |       |       |       |       |       |       |       |       |
//     |       |       |       |   Q   |       |       |       |       |
//     |       |       |       |       |       |       |       |       |
//     -----------------------------------------------------------------
//     |       |       |       |       |       |       |       |       |
//     |       |       |       |       |       |   Q   |       |       |
//     |       |       |       |       |       |       |       |       |
//     -----------------------------------------------------------------
//     |       |       |       |       |       |       |       |       |
//     |       |       |   Q   |       |       |       |       |       |
//     |       |       |       |       |       |       |       |       |
//     -----------------------------------------------------------------
//

// This procedure prints the chessboard that iis specified by Queens. Queens is
// a list of length n. For all i in [1..n], Queens[i] specifies the column of
// the queen that is positioned in row i.
printBoard := procedure(Queens) {
    n := #Queens;
    print((4 * n + 1) * "-");
    for (row in [1..n]) {
        line := "|";
        for (col in [1..n]) {
            if (Queens[row] == col) {
                line += " Q |";
            } else {
                line += "   |";
            }
        }
        print(line);
        print((4*n+1) * "-");
    }
};

// The interpretation of the parameters is as follows:
//      Queens: list of those queens that have already been placed
//      n:      size of the board
solve := procedure(Queens, n) { 
    if (#Queens == n) {
        return Queens;
    }
    for (x in {1 .. n} - {q : q in Queens}) {
        check {
            testNext(Queens, x);
            // if this has worked so far, try to add more queens
            return solve(Queens + [x], n);
        } 
    }
    backtrack;
};
// Check whether it is safe to add a queen in row x in the column that
// follows those columns that are already specified in the list queens of
// queens already placed.  It is assumed that the queens already 
// placed cannot attack each other.
testNext := procedure(Queens, x) {
    m := #Queens + 1;
    if (exists (i in {1 .. m-1} | i - Queens[i] == m-x || i+Queens[i] == m+x)) {
        backtrack;
    }
};

for (n in [8 .. 27]) {
    start    := now();
    solution := solve([], n);
    stop     := now();
    total    := (stop - start) / 1000.0;
    printBoard(solution);
    print("The computation for the $n$ queens problem took $total$ seconds.");
}
