load("a-star-lao-tzu.stlx");
// This program solves the 15-puzzle.

// The function stateToString converts the current state of the puzzle to a string.
stateToString := procedure(state) {
    n      := #state;
    indent := " " * 4;
    line   := indent + "+---" * n + "+\n";
    result := line;
    for (row in [1 .. n]) {
        result += indent + "|";
        for (col in [1 .. n]) {
            cell := state[row][col];
            if (cell == "*") {
                result += " * ";
            } else if (cell >= 10) {
                result += cell + " ";
            } else if (cell > 0 && cell < 10) {
                result += " " + cell + " ";
            } else {
                result += "   ";
            }
            result += "|";
        }
        result += "\n";
        result += line;
    }
    return result;
};
// Find the coordinates of the given tile in state.
findTile := procedure(tile, state) {
    n := #state;
    L := [1 .. n]; 
    for (row in L, col in L | state[row][col] == tile) {
        return [row, col];
    }
};
moveDir := procedure(state, row, col, dx, dy) {
    state[row     ][col     ] := state[row + dx][col + dy];
    state[row + dx][col + dy] := 0;
    return state;
};
nextStates := procedure(state) {
    n          := #state;
    [row, col] := findTile(0, state);
    newStates  := {};
    directions := [ [1, 0], [-1, 0], [0, 1], [0, -1] ];
    L          := [1 .. n];
    for ([dx, dy] in directions) {
        if (row + dx in L && col + dy in L) {
            newStates += { moveDir(state, row, col, dx, dy) };
        }
    }
    return newStates;
};
// Check, whether a pattern matches a state.  A pattern is like a state but
// instead of numbers,  some of the entries of the list of lists are the
// string "*".  The idea is that a "*" matches anything.
matches := procedure(Pattern, State) {
    // Your code here.
};
// Compute the manhattan distance between a state and a pattern.
manhattan := procedure(State, Pattern) {
    // Your code here.
};
// Given a state and a dictionary Parent that contains the predecessor of
// each state, this function computes the path leading to the given state.
pathTo := procedure(state, Parent) {
    Path := [];
    while (state != om) {
        Path  += [state];
        state := Parent[state];
    }
    return reverse(Path);
};
// Given an initial State, this procedure creates a list of intermediate
// patterns.  The patterns are created by turning the numbers given in
// the lists that make up the list Tiles into wildcards one by one.
create_intermediate := procedure(State, Tiles)  {
    Pattern      := State;
    Pattern_List := [ State ];
    for (L in reverse(Tiles)) {
        for (t in L) {
            Pattern := replace_number(Pattern, t);
        }
        Pattern_List += [ Pattern ];
    }
    return reverse(Pattern_List)[2..];
};
// Take the given tile and replace it in Pattern by "*".  The resulting
// pattern is returned.
replace_number := procedure(Pattern, tile) {
    // Your code here.
};

main := procedure() {
    Start := [ [ 15, 14, 8, 12 ],
               [ 10, 11, 13, 9 ],
               [  6,  2, 5,  1 ],
               [  3,  4, 7,  0 ]
             ];
    Goal  := [ [  1,  2,  3,  4 ],
               [  5,  6,  7,  8 ],
               [  9, 10, 11, 12 ],
               [ 13, 14, 15,  0 ]
             ];
    startTime   := now();
    TileList    := [1, 2, 3, 4, 5, 9, 13, 6, 7, 8, 10, 14, 11, 12, 15];
    PatternList := create_intermediate(Goal, TileList);
    State       := Start;
    Solution    := [];
    for (Pattern in PatternList) {
        print("Trying to reach the following pattern:");
        print(stateToString(Pattern));
        [State, Path] := aStarSearch(State, Pattern, nextStates, manhattan);
        print("The following state is reached after $#Path-1$ steps:");
        print(stateToString(State));
        Solution    += Path[..-2];
    }
    Solution += [ Goal ];
    stopTime := now();
    print("number of steps to solve the puzzle: $#Solution-1$");
    print("The solution is:\n");
    for (State in Solution) {
        print(stateToString(State));
    }
    print("Time used: $stopTime - startTime$ milliseconds.");
};
main();
